import 'dotenv/config';
import { BotOrchestrator } from './core/BotOrchestrator';
import { ConfigManager } from './services/ConfigManager';
import { MetricsCollector } from './services/MetricsCollector';
import { HealthMonitor } from './services/HealthMonitor';
import { CLIManager } from './cli/CLIManager';
import { CrossVenueHedgeBot } from './bots/CrossVenueHedgeBot';
import { Logger } from './core/Logger';
import chalk from 'chalk';

async function initializeCLI(): Promise<void> {
  const logger = Logger.getInstance();
  
  try {
    console.log(chalk.blue.bold('üöÄ VibeTrade CLI Ï¥àÍ∏∞Ìôî Ï§ë...\n'));

    // Initialize core services
    const configManager = ConfigManager.getInstance();
    const orchestrator = new BotOrchestrator();
    const metricsCollector = MetricsCollector.getInstance();
    const healthMonitor = HealthMonitor.getInstance(orchestrator);

    // Load configuration and initialize bots
    const config = configManager.getConfig();
    console.log(chalk.green(`‚úì ÏÑ§Ï†ï Î°úÎìú ÏôÑÎ£å: ${config.bots.length}Í∞ú Î¥á, ${config.exchanges.length}Í∞ú Í±∞ÎûòÏÜå`));

    // Initialize existing bots from configuration
    let initializedBots = 0;
    for (const botConfig of config.bots) {
      try {
        if (botConfig.type === 'CrossVenueHedge') {
          // Create mock exchanges for now - in real implementation, initialize actual exchanges
          const exchanges: any[] = [];
          const bot = new CrossVenueHedgeBot(botConfig as any, exchanges);
          await orchestrator.addBot(bot);
          initializedBots++;
        }
      } catch (error) {
        logger.warn(`Î¥á ${botConfig.id} Ï¥àÍ∏∞Ìôî Ïã§Ìå®: ${error}`);
      }
    }

    console.log(chalk.green(`‚úì ${initializedBots}Í∞ú Î¥á Ï¥àÍ∏∞Ìôî ÏôÑÎ£å`));

    // Auto-start enabled bots
    const enabledBots = config.bots.filter(bot => bot.enabled);
    if (enabledBots.length > 0) {
      console.log(chalk.blue(`üìç ${enabledBots.length}Í∞ú ÌôúÏÑ±ÌôîÎêú Î¥á ÏãúÏûë Ï§ë...`));
      try {
        await orchestrator.startAllBots();
        console.log(chalk.green('‚úì ÌôúÏÑ±ÌôîÎêú Î¥áÎì§ ÏãúÏûë ÏôÑÎ£å'));
      } catch (error) {
        console.log(chalk.yellow(`‚ö†Ô∏è  ÏùºÎ∂Ä Î¥á ÏãúÏûë Ïã§Ìå®: ${error}`));
      }
    }

    console.log(chalk.green('‚úì VibeTrade ÏãúÏä§ÌÖú Ï§ÄÎπÑ ÏôÑÎ£å\n'));

    // Start CLI interface
    const cliManager = new CLIManager({
      orchestrator,
      configManager,
      metricsCollector,
      healthMonitor
    });

    // Handle graceful shutdown
    process.on('SIGINT', async () => {
      console.log(chalk.yellow('\n\n‚èπÔ∏è  Ï¢ÖÎ£å Ïã†Ìò∏ Í∞êÏßÄ, ÏïàÏ†ÑÌïòÍ≤å Ï¢ÖÎ£å Ï§ë...'));
      try {
        await orchestrator.stopAllBots();
        console.log(chalk.green('‚úì Î™®Îì† Î¥á Ï†ïÏßÄ ÏôÑÎ£å'));
        process.exit(0);
      } catch (error) {
        console.log(chalk.red(`‚ùå Ï¢ÖÎ£å Ï§ë Ïò§Î•ò: ${error}`));
        process.exit(1);
      }
    });

    await cliManager.start();

  } catch (error) {
    console.log(chalk.red('‚ùå CLI Ï¥àÍ∏∞Ìôî Ïã§Ìå®:'), error);
    process.exit(1);
  }
}

// Enhanced error handling
process.on('unhandledRejection', (reason, promise) => {
  console.log(chalk.red('‚ùå Unhandled Rejection at:'), promise, chalk.red('reason:'), reason);
});

process.on('uncaughtException', (error) => {
  console.log(chalk.red('‚ùå Uncaught Exception:'), error);
  process.exit(1);
});

// Welcome banner
console.clear();
console.log(chalk.blue.bold(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           üöÄ VibeTrade CLI             ‚ïë
‚ïë     Î©ÄÌã∞Î¥á Ìä∏Î†àÏù¥Îî© ÏãúÏä§ÌÖú Í¥ÄÎ¶¨ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`));

// Start CLI
if (require.main === module) {
  initializeCLI().catch(error => {
    console.error(chalk.red('‚ùå Fatal error:'), error);
    process.exit(1);
  });
}